{"version":3,"file":"1-timer-4558945e.js","sources":["../../src/js/1-timer.js"],"sourcesContent":["// Завдання 1 - Таймер зворотного відліку\r\n// Виконуй це завдання у файлах 1 - timer.html і 1 - timer.js.\r\n// Напиши скрипт таймера, який здійснює зворотний відлік до певної дати.\r\n// Такий таймер може використовуватися у блогах, інтернет - магазинах,\r\n// сторінках реєстрації подій, під час технічного обслуговування тощо.\r\n// Подивися демовідео роботи таймера.\r\n// Елементи інтерфейсу\r\n\r\n// Додай в HTML файл розмітку таймера, поля вибору кінцевої дати і кнопку,\r\n// при кліку на яку таймер повинен запускатися.\r\n// Додай оформлення елементів інтерфейсу згідно з макетом.\r\n// Бібліотека flatpickr\r\n\r\n// Використовуй бібліотеку flatpickr для того,\r\n//     щоб дозволити користувачеві кросбраузерно вибрати кінцеву дату і час в \r\n// одному елементі інтерфейсу.Для того щоб підключити CSS код бібліотеки в проєкт,\r\n// необхідно додати ще один імпорт, крім того, що описаний в документації.\r\n\r\n// Вибір дати\r\n// Метод onClose() з об'єкта параметрів викликається щоразу під час закриття \r\n// елемента інтерфейсу, який створює flatpickr. Саме в ньому варто обробляти дату, \r\n// обрану користувачем. Параметр selectedDates — це масив обраних дат, тому ми \r\n// беремо перший елемент selectedDates[0].\r\n// Тобі ця обрана дата буде потрібна в коді і поза межами цього методу onClose().\r\n// Тому оголоси поза межами методу let змінну, наприклад, userSelectedDate, і після\r\n//  валідації її в методі onClose() на минуле/майбутнє запиши обрану дату в цю let \r\n//  змінну.\r\n\r\n// Якщо користувач вибрав дату в минулому, покажи window.alert() з текстом \r\n// \"Please choose a date in the future\" і зроби кнопку «Start» не активною.\r\n// Якщо користувач вибрав валідну дату (в майбутньому), кнопка «Start» стає \r\n// активною.\r\n// Кнопка «Start» повинна бути неактивною доти, доки користувач не вибрав дату\r\n//  в майбутньому. Зверни увагу, що при обранні валідної дати, не запуску таймера \r\n//  і обранні потім невалідної дати, кнопка після розблокування має знову стати \r\n//  неактивною.\r\n// Натисканням на кнопку «Start» починається зворотний відлік часу до обраної \r\n// дати з моменту натискання.\r\n\r\n\r\n// Відлік часу\r\n// Натисканням на кнопку «Start» скрипт повинен обчислювати раз на секунду,\r\n//  скільки часу залишилось до вказаної дати, і оновлювати інтерфейс таймера,\r\n//   показуючи чотири цифри: дні, години, хвилини і секунди у форматі xx:xx:xx:xx.\r\n// Кількість днів може складатися з більше, ніж двох цифр.\r\n// Таймер повинен зупинятися, коли дійшов до кінцевої дати, \r\n// тобто залишок часу дорівнює нулю 00:00:00:00.\r\n// Після запуску таймера натисканням кнопки Старт кнопка Старт і інпут стають \r\n// неактивним, щоб користувач не міг обрати нову дату, поки йде відлік часу.\r\n//  Після зупинки таймера інпут стає активним, щоб користувач міг обрати наступну \r\n//  дату. Кнопка залишається не активною.\r\n// Для підрахунку значень використовуй готову функцію convertMs, де ms — різниця \r\n// між кінцевою і поточною датою в мілісекундах.\r\n   \r\n// Форматування часу\r\n// Функція convertMs() повертає об'єкт з розрахованим часом, що залишився \r\n// до кінцевої дати. Зверни увагу, що вона не форматує результат.\r\n//  Тобто якщо залишилося 4 хвилини або будь-якої іншої складової часу, \r\n//  то функція поверне 4, а не 04. В інтерфейсі таймера необхідно додавати 0,\r\n// якщо в числі менше двох символів. Напиши функцію, наприклад\r\n// addLeadingZero(value), яка використовує метод рядка padStart() і перед \r\n// відмальовуванням інтерфейсу форматує значення.\r\n\r\n// Бібліотека повідомлень\r\n// Для відображення повідомлень користувачеві, замість window.alert(),\r\n// використовуй бібліотеку iziToast. Для того щоб підключити CSS код бібліотеки\r\n// в проєкт, необхідно додати ще один імпорт, крім того, що описаний у документації.\r\n// Бібліотека очікує, що її ініціалізують на елементі input[type = \"text\"],\r\n//     тому ми додали до HTML документа поле input#datetime - picker.\r\n\r\n\r\n// Описаний в документації\r\nimport flatpickr from \"flatpickr\";\r\n// Додатковий імпорт стилів\r\nimport \"flatpickr/dist/flatpickr.min.css\";\r\n\r\n// Описаний у документації\r\nimport iziToast from \"izitoast\";\r\n// Додатковий імпорт стилів\r\nimport \"izitoast/dist/css/iziToast.min.css\";\r\n\r\n\r\nconst datetimePicker = document.getElementById('datetime-picker');\r\nconst dataStart = document.getElementById('data-start');\r\nconst elements = {\r\n    days: document.querySelector('[data-days]'),\r\n    hours: document.querySelector('[data-hours]'),\r\n    minutes: document.querySelector('[data-minutes]'),\r\n    seconds: document.querySelector('[data-seconds]')\r\n}\r\n// Оголошуємо змінні для збереження вибраної дати та інтервалу таймера\r\nlet userSelectedDate = null;\r\nlet countdownInterval = null;\r\n\r\n// Налаштування для flatpickr\r\nconst options = {\r\n    enableTime: true,\r\n    time_24hr: true,\r\n    defaultDate: new Date(),\r\n    minuteIncrement: 1,\r\n    onClose(selectedDates) {\r\n        userSelectedDate = selectedDates[0];\r\n      if(!userSelectedDate || userSelectedDate <= new Date()) {\r\n        iziToast.warning({\r\n            icon: '',\r\n            messageColor: 'white',\r\n            position: 'topRight',\r\n            messageSize: '10px',\r\n            backgroundColor: 'red',\r\n            \r\n            message:\"Please choose a date in the future\"\r\n                });\r\n        dataStart.disabled = true;\r\n      } else{\r\n        dataStart.disabled = false;\r\n      }\r\n    },\r\n  };\r\n  // Ініціалізація flatpickr з налаштуваннями\r\n  flatpickr(datetimePicker, options);\r\n  // Додавання обробника події на кнопку \"Start\"\r\n  dataStart.addEventListener('click', () => {\r\n    if (!userSelectedDate || userSelectedDate <= new Date()) {\r\n        iziToast.show({\r\n            icon: '',\r\n            messageColor: 'white',\r\n            position: 'topRight',\r\n            messageSize: '10px',\r\n            backgroundColor: 'red',\r\n            \r\n            message:\"Please choose a date in the future\"\r\n        });\r\n       return;\r\n    }\r\n  // Очищення попереднього інтервалу таймера\r\nclearInterval(countdownInterval);\r\n// Запуск таймера з оновленням раз на секунду\r\ncountdownInterval = setInterval(() => {\r\n    const now = new Date(); // Поточний час\r\n    const timeLeft = userSelectedDate - now; // Час, що залишився до вибраної дати\r\n  // Якщо час вичерпано, зупиняємо таймер\r\n  if(timeLeft <= 0 ) {\r\n    clearInterval(countdownInterval);\r\n    dataStart.disabled = false; // Активізація кнопки \"Start\"\r\n    datetimePicker.disabled = false; // Активізація поля вибору дати\r\n    return;\r\n  }\r\n  // Розрахунок днів, годин, хвилин та секунд, що залишилися\r\n  const {days, hours, minutes, seconds} = convertMs(timeLeft);\r\n  // Оновлення значень на екрані\r\n  elements.days.textContent = addLeadingZero(days);\r\n  elements.hours.textContent = addLeadingZero(hours);\r\n  elements.minutes.textContent = addLeadingZero(minutes);\r\n  elements.seconds.textContent = addLeadingZero(seconds);\r\n   }, 1000);\r\ndataStart.disabled = true; // Деактивація кнопки \"Start\" під час таймера\r\ndatetimePicker.disabled = true; // Деактивація поля вибору дати під час таймера\r\n  });\r\n  // Функція для перетворення мілісекунд у дні, години, хвилини та секунди\r\n    function convertMs(ms) {\r\n    // Number of milliseconds per unit of time\r\n    const second = 1000;\r\n    const minute = second * 60;\r\n    const hour = minute * 60;\r\n    const day = hour * 24;\r\n  \r\n    // Remaining days\r\n    const days = Math.floor(ms / day);\r\n    // Remaining hours\r\n    const hours = Math.floor((ms % day) / hour);\r\n    // Remaining minutes\r\n    const minutes = Math.floor(((ms % day) % hour) / minute);\r\n    // Remaining seconds\r\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\r\n  \r\n    return { days, hours, minutes, seconds };\r\n  }\r\n  // Функція для додавання нуля перед числом, якщо воно менше двох символів\r\nfunction addLeadingZero(value){\r\n    return String(value).padStart(2, '0');\r\n}\r\n\r\n  console.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\r\n  console.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\r\n  console.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\r\n  "],"names":["datetimePicker","dataStart","elements","userSelectedDate","countdownInterval","options","selectedDates","iziToast","flatpickr","timeLeft","days","hours","minutes","seconds","convertMs","addLeadingZero","ms","value"],"mappings":"gDAkFA,MAAMA,EAAiB,SAAS,eAAe,iBAAiB,EAC1DC,EAAY,SAAS,eAAe,YAAY,EAChDC,EAAW,CACb,KAAM,SAAS,cAAc,aAAa,EAC1C,MAAO,SAAS,cAAc,cAAc,EAC5C,QAAS,SAAS,cAAc,gBAAgB,EAChD,QAAS,SAAS,cAAc,gBAAgB,CACpD,EAEA,IAAIC,EAAmB,KACnBC,EAAoB,KAGxB,MAAMC,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACnBH,EAAmBG,EAAc,CAAC,EACjC,CAACH,GAAoBA,GAAoB,IAAI,MAC9CI,EAAS,QAAQ,CACb,KAAM,GACN,aAAc,QACd,SAAU,WACV,YAAa,OACb,gBAAiB,MAEjB,QAAQ,oCACpB,CAAiB,EACTN,EAAU,SAAW,IAErBA,EAAU,SAAW,EAExB,CACL,EAEEO,EAAUR,EAAgBK,CAAO,EAEjCJ,EAAU,iBAAiB,QAAS,IAAM,CACxC,GAAI,CAACE,GAAoBA,GAAoB,IAAI,KAAQ,CACrDI,EAAS,KAAK,CACV,KAAM,GACN,aAAc,QACd,SAAU,WACV,YAAa,OACb,gBAAiB,MAEjB,QAAQ,oCACpB,CAAS,EACF,MACF,CAEL,cAAcH,CAAiB,EAE/BA,EAAoB,YAAY,IAAM,CAElC,MAAMK,EAAWN,EADL,IAAI,KAGlB,GAAGM,GAAY,EAAI,CACjB,cAAcL,CAAiB,EAC/BH,EAAU,SAAW,GACrBD,EAAe,SAAW,GAC1B,MACD,CAED,KAAM,CAAC,KAAAU,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAIC,EAAUL,CAAQ,EAE1DP,EAAS,KAAK,YAAca,EAAeL,CAAI,EAC/CR,EAAS,MAAM,YAAca,EAAeJ,CAAK,EACjDT,EAAS,QAAQ,YAAca,EAAeH,CAAO,EACrDV,EAAS,QAAQ,YAAca,EAAeF,CAAO,CACnD,EAAE,GAAI,EACVZ,EAAU,SAAW,GACrBD,EAAe,SAAW,EAC1B,CAAG,EAEC,SAASc,EAAUE,EAAI,CAQvB,MAAMN,EAAO,KAAK,MAAMM,EAAK,KAAG,EAE1BL,EAAQ,KAAK,MAAOK,EAAK,MAAO,IAAI,EAEpCJ,EAAU,KAAK,MAAQI,EAAK,MAAO,KAAQ,GAAM,EAEjDH,EAAU,KAAK,MAASG,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACvC,CAEH,SAASE,EAAeE,EAAM,CAC1B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACxC,CAEE,QAAQ,IAAIH,EAAU,GAAI,CAAC,EAC3B,QAAQ,IAAIA,EAAU,IAAM,CAAC,EAC7B,QAAQ,IAAIA,EAAU,MAAQ,CAAC"}