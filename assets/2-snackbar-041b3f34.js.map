{"version":3,"file":"2-snackbar-041b3f34.js","sources":["../../src/js/2-snackbar.js"],"sourcesContent":["// Завдання 2 - Генератор промісів\n\n// Виконуй це завдання у файлах 2-snackbar.html і 2-snackbar.js.\n//  Подивися демовідео роботи генератора промісів.\n// Додай в HTML файл розмітку форми. Форма складається з поля вводу для\n// введення значення затримки в мілісекундах, двох радіокнопок, які визначають те, \n// як виконається проміс, і кнопки з типом submit, при кліку на яку має\n// створюватися проміс.\n// Напиши скрипт, який після сабміту форми створює проміс. \n// В середині колбека цього промісу через вказану користувачем кількість мілісекунд\n// проміс має виконуватися (при fulfilled) або відхилятися (при rejected), \n// залежно від обраної опції в радіокнопках. Значенням промісу, яке передається \n// як аргумент у методи resolve/reject, має бути значення затримки в мілісекундах.\n\n// Створений проміс треба опрацювати у відповідних для вдалого/невдалого\n//  виконання методах.\n\n// Якщо проміс виконується вдало, виводь у консоль наступний рядок, \n// де delay — це значення затримки виклику промісу в мілісекундах.\n// `✅ Fulfilled promise in ${delay}ms`\n// Якщо проміс буде відхилено, то виводь у консоль наступний рядок, \n// де delay — це значення затримки промісу в мілісекундах.\n// `❌ Rejected promise in ${delay}ms`\n// Бібліотека повідомлень\n\n// Для відображення повідомлень, замість console.log(),\n//  використовуй бібліотеку iziToast. Для того щоб підключити CSS \n//  код бібліотеки в проєкт, необхідно додати ще один імпорт,\n//   крім того, що описаний у документації.\n\n// Описаний у документації\nimport iziToast from \"izitoast\";\n// Додатковий імпорт стилів\nimport \"izitoast/dist/css/iziToast.min.css\";\n\ndocument.getElementById('promise-form').addEventListener ('submit', function(event) {\n    event.preventDefault();\n\n    const delay = parseInt(document.getElementById('delay').value, 10);\n    const state = document.querySelector('input[name=\"state\"]:checked').value;\n\n    const promise = new Promise((resolve, reject) => {\n        setTimeout (() => {\n            if(state === \"success\") {\n                    resolve(`✅ Fulfilled promise in ${delay}ms`);\n            } else {\n                    reject(`❌ Rejected promise in ${delay}ms`);\n            }\n        }, delay);\n    });\n        promise\n        .then(message => {\n            iziToast.show ({\n                title: 'Success',\n                backgroundColor: 'green',\n                messageColor: 'white',\n                position: 'topRight',\n                messageSize: '10px'\n            });\n        })\n        .catch (message => {\n            iziToast.show ({\n                title: 'Error',\n                backgroundColor: 'red',\n                messageColor: 'white',\n                position: 'topRight',\n                messageSize: '10px'\n            });\n        });\n    });"],"names":["event","delay","state","resolve","reject","message","iziToast"],"mappings":"yCAmCA,SAAS,eAAe,cAAc,EAAE,iBAAkB,SAAU,SAASA,EAAO,CAChFA,EAAM,eAAc,EAEpB,MAAMC,EAAQ,SAAS,SAAS,eAAe,OAAO,EAAE,MAAO,EAAE,EAC3DC,EAAQ,SAAS,cAAc,6BAA6B,EAAE,MAEpD,IAAI,QAAQ,CAACC,EAASC,IAAW,CAC7C,WAAY,IAAM,CACXF,IAAU,UACLC,EAAQ,0BAA0BF,CAAK,IAAI,EAE3CG,EAAO,yBAAyBH,CAAK,IAAI,CAEpD,EAAEA,CAAK,CAChB,CAAK,EAEI,KAAKI,GAAW,CACbC,EAAS,KAAM,CACX,MAAO,UACP,gBAAiB,QACjB,aAAc,QACd,SAAU,WACV,YAAa,MAC7B,CAAa,CACb,CAAS,EACA,MAAOD,GAAW,CACfC,EAAS,KAAM,CACX,MAAO,QACP,gBAAiB,MACjB,aAAc,QACd,SAAU,WACV,YAAa,MAC7B,CAAa,CACb,CAAS,CACT,CAAK"}