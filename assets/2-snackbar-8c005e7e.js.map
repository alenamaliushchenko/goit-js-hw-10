{"version":3,"file":"2-snackbar-8c005e7e.js","sources":["../../src/js/2-snackbar.js"],"sourcesContent":["// Завдання 2 - Генератор промісів\r\n\r\n// Виконуй це завдання у файлах 2-snackbar.html і 2-snackbar.js.\r\n//  Подивися демовідео роботи генератора промісів.\r\n// Додай в HTML файл розмітку форми. Форма складається з поля вводу для\r\n// введення значення затримки в мілісекундах, двох радіокнопок, які визначають те, \r\n// як виконається проміс, і кнопки з типом submit, при кліку на яку має\r\n// створюватися проміс.\r\n// Напиши скрипт, який після сабміту форми створює проміс. \r\n// В середині колбека цього промісу через вказану користувачем кількість мілісекунд\r\n// проміс має виконуватися (при fulfilled) або відхилятися (при rejected), \r\n// залежно від обраної опції в радіокнопках. Значенням промісу, яке передається \r\n// як аргумент у методи resolve/reject, має бути значення затримки в мілісекундах.\r\n\r\n// Створений проміс треба опрацювати у відповідних для вдалого/невдалого\r\n//  виконання методах.\r\n\r\n// Якщо проміс виконується вдало, виводь у консоль наступний рядок, \r\n// де delay — це значення затримки виклику промісу в мілісекундах.\r\n// `✅ Fulfilled promise in ${delay}ms`\r\n// Якщо проміс буде відхилено, то виводь у консоль наступний рядок, \r\n// де delay — це значення затримки промісу в мілісекундах.\r\n// `❌ Rejected promise in ${delay}ms`\r\n// Бібліотека повідомлень\r\n\r\n// Для відображення повідомлень, замість console.log(),\r\n//  використовуй бібліотеку iziToast. Для того щоб підключити CSS \r\n//  код бібліотеки в проєкт, необхідно додати ще один імпорт,\r\n//   крім того, що описаний у документації.\r\n\r\n// Описаний у документації\r\nimport iziToast from \"izitoast\";\r\n// Додатковий імпорт стилів\r\nimport \"izitoast/dist/css/iziToast.min.css\";\r\nimport \"../css/snackbar.css\";\r\n\r\ndocument.getElementById('promise-form').addEventListener ('submit', function(event) {\r\n    event.preventDefault();\r\n\r\n    const delay = parseInt(document.getElementById('delay').value, 10);\r\n    const state = document.querySelector('input[name=\"state\"]:checked').value;\r\n\r\n    const promise = new Promise((resolve, reject) => {\r\n        setTimeout (() => {\r\n            if(state === \"fulfilled\") {\r\n                    resolve(`✅ Fulfilled promise in ${delay}ms`);\r\n            } else {\r\n                    reject(`❌ Rejected promise in ${delay}ms`);\r\n            }\r\n        }, delay);\r\n    });\r\n        promise\r\n        .then(message => {\r\n            iziToast.show ({\r\n               \r\n                message:`✅ Fulfilled promise in ${delay}ms`,\r\n                backgroundColor: 'green',\r\n                messageColor: 'white',\r\n                position: 'topRight',\r\n                messageSize: '10px',\r\n                icon: 'no-border-icon'\r\n            });\r\n        })\r\n        .catch (message => {\r\n            iziToast.show ({\r\n                \r\n                message:`❌ Rejected promise in ${delay}ms`,\r\n                backgroundColor: 'red',\r\n                messageColor: 'white',\r\n                position: 'topRight',\r\n                messageSize: '10px'\r\n            });\r\n        });\r\n    });"],"names":["event","delay","state","resolve","reject","message","iziToast"],"mappings":"yCAoCA,SAAS,eAAe,cAAc,EAAE,iBAAkB,SAAU,SAASA,EAAO,CAChFA,EAAM,eAAc,EAEpB,MAAMC,EAAQ,SAAS,SAAS,eAAe,OAAO,EAAE,MAAO,EAAE,EAC3DC,EAAQ,SAAS,cAAc,6BAA6B,EAAE,MAEpD,IAAI,QAAQ,CAACC,EAASC,IAAW,CAC7C,WAAY,IAAM,CACXF,IAAU,YACLC,EAAQ,0BAA0BF,CAAK,IAAI,EAE3CG,EAAO,yBAAyBH,CAAK,IAAI,CAEpD,EAAEA,CAAK,CAChB,CAAK,EAEI,KAAKI,GAAW,CACbC,EAAS,KAAM,CAEX,QAAQ,0BAA0BL,CAAK,KACvC,gBAAiB,QACjB,aAAc,QACd,SAAU,WACV,YAAa,OACb,KAAM,gBACtB,CAAa,CACb,CAAS,EACA,MAAOI,GAAW,CACfC,EAAS,KAAM,CAEX,QAAQ,yBAAyBL,CAAK,KACtC,gBAAiB,MACjB,aAAc,QACd,SAAU,WACV,YAAa,MAC7B,CAAa,CACb,CAAS,CACT,CAAK"}